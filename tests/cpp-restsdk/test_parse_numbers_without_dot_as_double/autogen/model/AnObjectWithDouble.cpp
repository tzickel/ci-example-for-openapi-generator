/**
 * test
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AnObjectWithDouble.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AnObjectWithDouble::AnObjectWithDouble()
{
    m_Num1 = 0.0;
    m_Num1IsSet = false;
    m_Num2 = 0.0;
    m_Num2IsSet = false;
}

AnObjectWithDouble::~AnObjectWithDouble()
{
}

void AnObjectWithDouble::validate()
{
    // TODO: implement validation
}

web::json::value AnObjectWithDouble::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Num1IsSet)
    {
        val[utility::conversions::to_string_t("num1")] = ModelBase::toJson(m_Num1);
    }
    if(m_Num2IsSet)
    {
        val[utility::conversions::to_string_t("num2")] = ModelBase::toJson(m_Num2);
    }

    return val;
}

bool AnObjectWithDouble::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("num1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("num1"));
        if(!fieldValue.is_null())
        {
            double refVal_num1;
            ok &= ModelBase::fromJson(fieldValue, refVal_num1);
            setNum1(refVal_num1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("num2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("num2"));
        if(!fieldValue.is_null())
        {
            double refVal_num2;
            ok &= ModelBase::fromJson(fieldValue, refVal_num2);
            setNum2(refVal_num2);
        }
    }
    return ok;
}

void AnObjectWithDouble::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Num1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("num1"), m_Num1));
    }
    if(m_Num2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("num2"), m_Num2));
    }
}

bool AnObjectWithDouble::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("num1")))
    {
        double refVal_num1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("num1")), refVal_num1 );
        setNum1(refVal_num1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("num2")))
    {
        double refVal_num2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("num2")), refVal_num2 );
        setNum2(refVal_num2);
    }
    return ok;
}

double AnObjectWithDouble::getNum1() const
{
    return m_Num1;
}

void AnObjectWithDouble::setNum1(double value)
{
    m_Num1 = value;
    m_Num1IsSet = true;
}

bool AnObjectWithDouble::num1IsSet() const
{
    return m_Num1IsSet;
}

void AnObjectWithDouble::unsetNum1()
{
    m_Num1IsSet = false;
}
double AnObjectWithDouble::getNum2() const
{
    return m_Num2;
}

void AnObjectWithDouble::setNum2(double value)
{
    m_Num2 = value;
    m_Num2IsSet = true;
}

bool AnObjectWithDouble::num2IsSet() const
{
    return m_Num2IsSet;
}

void AnObjectWithDouble::unsetNum2()
{
    m_Num2IsSet = false;
}
}
}
}
}


